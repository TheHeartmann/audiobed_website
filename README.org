* Audiobed website project
  #+CAPTION: Build status
  [[https://travis-ci.org/TheHeartmann/audiobed_website][https://travis-ci.org/TheHeartmann/audiobed_website.svg?branch=master#.svg]]

  The goal of this project is to create a simple static website for the purposes of learning and gaining experience with Rust (server), Elm (front-end), and, to a lesser degree, CSS (in particular: CSS grid).

  Furthermore, in the interest of gaining more experience with deployment and integration systems, the project will use Travis CI for integration testing and deployment to Heroku.

**  Roadmap
*** DONE Create repo
    CLOSED: [2018-04-22 Sun 20:44]
    - [X] Git init
    - [X] Add readme
    - [X] Add .gitignore
    - [X] Configure commit hooks
    - [X] Set up remote
    - [X] Invite collaborators
	- [X] Collaborators confirm invite
*** TODO Git commit hooks? [0/2] [0%]
    +- [X] Automatic md export of `README.org` to `README.md`+
    - [ ] Pre-push hook that runs test suites and fails if the tests do
    - [-] Formatting source code [3/6] [50%]
      - [ ] CSS?
      - [X] Elm
      - [ ] HTML?
      - [ ] JS (Standard)?
      - [X] Rust
      - [X] Python (YAPF)
        - [X] Format
        - [X] Make sure YAPF is installed (gets installed in init_repo)
*** DONE Decide on build process [1/1] [100%]
    CLOSED: [2018-05-18 Fri 10:04]
    Should the markup on the site be completely in elm, or should as much as possible be static HTML?
    If the latter, how do we want to do that? Pure HTML? Rust templating?
    - [X] Decide what to do about HTML
      Current idea:
      - Structure project into two main frontend branches: yew and elm
      - Leave straight HTML for later. Implement if it becomes necessary.
      +- Use straight HTML?+
      +- Use pure elm?+
      +- Use Rust templates+
        +- Alternatives include:+
          +- *Maud* (this seems promising and is remarkably similar to elm's HTML module)+
          +- Horrorshow+
          +- Tera+
          +- Handlebars+
*** DONE Decide on initial architecture and structure of app
    CLOSED: [2018-04-29 Sun 16:09]
    +- Should rust/server stuff be separated?+
    +- Suggestion: /server/src /content+
*** TODO Set up Travis build process [5/6] [83%]
    - [X] Init travis
    - [X] Set up heroku api key
    - [X] Replace email notifications with Slack notifications
      - [X] Set up slack channel for this
      - [X] Configure Travis
    - [X] Set up automatic deploy based on branch
    - [X] Set up file renaming on push [4/4] [100%]
      - [X] Write script to do this
      - [X] test said script
      - [X] Integrate into Travis build process
      - [X] Push with dist to heroku
        - [X] Find out whether the changes must be committed or not
        - [X] If the latter, commit. Else: leave as is.
      - To avoid caching issues, every time a JS, CSS, HTML file is updated, its name should change. This way, a browser will never request a stale version of a certain file.
      - Suggestion: each file should have appended to the name the commit hash for the last change to the file (e.g. `main.html@8fe642ed`)
      - Solution: build system copies files to a dist folder and renames all references to them.
    - [ ] Set up testing
*** TODO Set up Heroku integration [1/3] [33%]
    - [X] Set up automatic publish on push to master
    - [-] Configure buildpacks
      - [X] [[https://github.com/emk/heroku-buildpack-rust][Rust]]
        - [X] Follow github guide
        - [X] Follow [[http://www.duelinmarkers.com/2017/10/21/how-to-deploy-a-rocket-application-to-heroku.html][this guide]] and [[https:github.com/SergioBenitez/Rocket/issues/171][this github issue]]
        - [X] Test
      - [ ] [[https://github.com/srid/heroku-buildpack-elm][Elm]]
        - [ ] Main Elm
        - [ ] Might need static?
        - [ ] Test
    - [-] Set up multiple versions of the site for multiple branches [2/3] [66%]
      - [X] master: production
      - [X] dev: dev
      - [ ] create an easy system to add new branches
        - This can either be a simple set of instructions, an automatic process, *or* a script that takes care of it
        - Necessary steps:
          - [ ] heroku create audiobed-{branch} --remote {branch || remote}
          - [ ] set buildpacks
          - [ ] Add to travis.yml:
            app:
                ...
                {branch}: audiobed-{branch}
*** TODO Look into Coveralls.io [0/3] [0%]
    - [ ] Read up
    - [ ] Find out whether it covers Rust and/or Elm
    - [ ] Decide on integration strategy
*** Administrative tasks [3/7] [42%]
    - [X] Remove .vscode from git
      - [X] delete
      - [X] git rm -rf --cached
      - [X] remove exclusion in .gitignore
    - [X] Remove readme markdown
      - [X] delete
      - [X] git rm -rf --cached
      - [X] remove pandoc doc generation
    - [ ] Add Clement to cargo.toml
    - [ ] Create 'getting started' section
    - [ ] Create frontend-elm branch off of dev
    - [ ] Create frontend-yew branch off of dev
    - [X] Improve project structure
      - [X] Separate into backend and frontend / Rust and elm
      - [X] Make dist dir
      - +[ ] Place static html / css in dist?+
