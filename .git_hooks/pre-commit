#!/usr/bin/env python

import os
import re
import sys

from file_definitions import NO_EXT_PYTHON_FILES
from misc import start_hook, end_hook, print_message


def get_changed_files():
    return os.popen('git diff --cached --name-only --diff-filter=ACM') \
        .read().strip().split('\n')


def is_tracked(path):
    return os.popen('git ls-files --error-unmatch {}'.format(
        path)).readline().strip() == path


def add_to_commit(file_string):
    if not is_tracked(file_string):
        print('New file: {}. Adding to git.'.format(file_string))
    os.system('git add {}'.format(file_string))


def format(format_cmd, files, *flags):
    '''
    Attempts to format code. Returns True if successful.
    Raises an exception if something goes wrong.
    '''
    if not files:
        return True

    file_string = ' '.join(files)

    return_code = os.system('{} {} {}'.format(format_cmd, file_string,
                                              ' '.join(flags)))
    if return_code > 0:  # we encountered an error
        raise Exception('''
        There was an error in formatting the committed code for {}.
        The process exited with code {}'''.format(file_string, return_code))
    print_message("Successfully formatted {}".format(file_string))
    add_to_commit(file_string)
    return True


def elm_format(files):
    return format('elm-format', files, '--yes')


def rustfmt(files):
    '''
    If rustfmt successfully reformatted the code it will exit with 0 exit
    status. Exit status 1 signals some unexpected error, like an unknown option
    or a failure to read a file. Exit status 2 is returned if there are syntax
    errors in the input files. rustfmt can't format syntactically invalid code.
    Finally, exit status 3 is returned if there are some issues which can't be
    resolved automatically. For example, if you have a very long comment line
    rustfmt doesn't split it. Instead it prints a warning and exits with 3.
    '''
    return format('rustfmt', files)


def get_files(files, ext):
    return [x for x in files if re.search(r'\w+\.{}$'.format(ext), x)]


def yapf(files):
    return format('yapf', files, '-i', '--style pep8')


def main(changed_files):
    def get_committed_files(ext):
        return get_files(changed_files, ext)

    elm_format(get_committed_files('elm'))

    rustfmt(get_committed_files('rs'))

    python_files = get_committed_files('py') \
        + [x for x in changed_files if x.rsplit(os.path.sep)[-1] in NO_EXT_PYTHON_FILES]
    yapf(python_files)


if __name__ == "__main__":
    start_hook('Performing pre-commit validation.')
    changed_files = get_changed_files()
    try:
        main(changed_files)
    except Exception as e:
        end_hook(e)
        sys.exit(1)
    else:
        end_hook('Successfully passed pre-commit validation.')
