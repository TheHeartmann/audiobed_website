#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import re
import sys

import subprocess
from subprocess import PIPE

from file_definitions import NO_EXT_PYTHON_FILES
from misc import start_hook, end_hook, print_message


def get_changed_files():
    return os.popen('git diff --cached --name-only --diff-filter=ACM') \
        .read().strip().split('\n')


def is_tracked(path):
    return os.popen('git ls-files --error-unmatch {}'.format(
        path)).readline().strip() == path


def add_to_commit(*files):
    for f in files:
        if not is_tracked(f):
            print('New file: {}. adding to git.'.format(f))
    os.system('git add {}'.format(' '.join(files)))


def format(format_cmd, files, *flags):
    '''
    Attempts to format code. Returns True if successful.
    Raises an exception if something goes wrong.
    '''
    if not files:
        return True

    file_string = ' '.join(files)

    return_code = os.system('{} {} {}'.format(format_cmd, file_string,
                                              ' '.join(flags)))
    if return_code > 0:  # we encountered an error
        raise Exception('''
        There was an error in formatting the committed code for {}.
        The process exited with code {}'''.format(file_string, return_code))
    print_message("Successfully formatted {}".format(file_string))
    add_to_commit(*file_string.split())
    return True


def elm_format_cmd(files):
    return ('elm-format', files, '--yes')


def rustfmt_cmd(files):
    '''
    If rustfmt successfully reformatted the code it will exit with 0 exit
    status. Exit status 1 signals some unexpected error, like an unknown option
    or a failure to read a file. Exit status 2 is returned if there are syntax
    errors in the input files. rustfmt can't format syntactically invalid code.
    Finally, exit status 3 is returned if there are some issues which can't be
    resolved automatically. For example, if you have a very long comment line
    rustfmt doesn't split it. Instead it prints a warning and exits with 3.
    '''
    return ('rustfmt', files)


def get_files(files, ext):
    return [x for x in files if re.search(r'\w+\.{}$'.format(ext), x)]


def yapf_cmd(files):
    return ('yapf', files, '-i', '--style pep8')


def standard_cmd(files):
    return ('stardard', files, '--fix')


def run_formatter(*format_cmds):
    return [format(*x) for x in format_cmds]


def test(cmd, test_dir):
    origin = os.getcwd()
    try:
        os.chdir(test_dir)
        try:
            print_message('Running command {}'.format(cmd))
            return 0, subprocess.check_output([cmd], stderr=PIPE)
        except subprocess.CalledProcessError as e:
            return e.returncode, e.output
    finally:
        os.chdir(origin)


class TestSettings():
    def __init__(self, cmd, directory):
        self.cmd = cmd
        self.dir = directory


class TestResult():
    def __init__(self, return_code, msg):
        self.return_code = return_code
        self.msg = msg


class TestFailureException(Exception):
    pass


def run_tests(*test_settings):
    return [TestResult(*test(x.cmd, x.dir)) for x in test_settings]


def test_validation(*test_settings):
    if test_settings:
        test_results = run_tests(*test_settings)
        failures = [x.msg for x in test_results if x.return_code != 0]
        if failures:
            raise TestFailureException('\n\n'.join(failures))
        else:
            print_message('✓ All tests passed!')


def main(changed_files):
    def get_committed_files(ext):
        return get_files(changed_files, ext)

    elm_files = get_committed_files('elm')
    rust_files = get_committed_files('rs')
    python_files = get_committed_files('py') \
        + [x for x in changed_files if x.rsplit(os.path.sep)[-1] in NO_EXT_PYTHON_FILES]
    js_files = get_committed_files('js')

    test_settings = []
    if elm_files:
        test_settings.append(
            TestSettings('elm-test', os.path.join('frontend', 'elm')))
    if rust_files:
        pass
    # format
    run_formatter(
        elm_format_cmd(elm_files), rustfmt_cmd(rust_files),
        yapf_cmd(python_files), standard_cmd(js_files))

    # run tests
    test_validation(*test_settings)


if __name__ == "__main__":
    start_hook('Performing pre-commit validation.')
    CHANGED_FILES = get_changed_files()
    try:
        main(CHANGED_FILES)
    except TestFailureException as e:
        end_hook(
            '✘ Tests failed! Check the output and fix your code before committing.\n\n{}'.
            format(e))
        sys.exit(1)
    except Exception as e:
        end_hook(e)
        sys.exit(1)
    else:
        end_hook('Successfully passed pre-commit validation.')
